#!/usr/bin/env node

const fs = require("fs");
const { exec } = require("child_process");
const readline = require("readline");
const plist = require("plist");
const Xcode = require("xcode-node");

const readFile = path => {
  return new Promise((resolve, reject) => {
    fs.readFile(path, "utf8", (err, data) => {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
};

const writeFile = (path, content) => {
  return new Promise((resolve, reject) => {
    fs.writeFile(path, content, "utf8", (err, data) => {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
};

const readDir = path => {
  return new Promise((resolve, reject) => {
    fs.readdir(path, "utf8", (err, data) => {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
};

const execute = cmd => {
  return new Promise((resolve, reject) => {
    exec(cmd?.replace(/\n/g, " "), (err, stdout, stderr) => {
      if (err) {
        console.log(err);
        reject(err);
      } else {
        resolve({ stdout, stderr });
      }
    });
  });
};

const start = async () => {
  let path = process.env.PWD;
  while (true) {
    if (fs.existsSync(path + "/package.json")) break;
    if (path.length < 10) {
      throw { message: "not found package.json" };
    }
    path = path.substring(0, path.lastIndexOf("/"));
  }

  const pkg = JSON.parse(await readFile(path + "/package.json"));
  if (
    !pkg.dependencies["react-native"] ||
    !pkg.dependencies["react-native-code-push"]
  ) {
    throw { message: "not a codepush env" };
  }

  let name = (await readDir(path + "/ios"))?.filter(v =>
    v.endsWith(".xcodeproj")
  )?.[0];
  name = name.substring(0, name.indexOf(".xcode"));

  console.log(name);

  const project = new Xcode(path + `/ios/${name}.xcodeproj/project.pbxproj`);
  const targets = project.getTargets();
  console.log(targets);

};
console.log("is Execute");

start().catch(e => {
  console.warn(e);
  process.exit(1);
});
